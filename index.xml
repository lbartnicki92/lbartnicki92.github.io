<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT Knowledge Pill</title>
    <link>http://lbartnicki92.github.io/</link>
    <description>Recent content on IT Knowledge Pill</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 15 Apr 2020 10:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://lbartnicki92.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker registry - operations on API</title>
      <link>http://lbartnicki92.github.io/posts/docker_registry_api_operations/</link>
      <pubDate>Wed, 15 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_registry_api_operations/</guid>
      <description>Instead of using Docker CLI commands - we can communicate with Docker registry with GET/POST methods of Docker Registry HTTP API.
Post include information for V2 of API.
Example setup For our examples we use docker private registry in container. Currently we have got alpine image and couple of ubuntu images loaded in it.
[lukas@docker-host ~]$ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f628491a985a registry:2 &amp;#34;/entrypoint.sh /etc…&amp;#34; About a minute ago Up About a minute 0.</description>
    </item>
    
    <item>
      <title>Docker private registry - setup</title>
      <link>http://lbartnicki92.github.io/posts/docker_private_registry_setup/</link>
      <pubDate>Tue, 14 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_private_registry_setup/</guid>
      <description>It is very common to setup own Docker registry for our private images.
Basic registry setup If we want basic setup without TLS and any access control for example for lab, we can create it with command:
[lukas@docker-host ~]$ docker run -d -p 5000:5000 --restart=always --name registry registry:2 Unable to find image &amp;#39;registry:2&amp;#39; locally 2: Pulling from library/registry 486039affc0a: Pull complete ba51a3b098e6: Pull complete 8bb4c43d6c8e: Pull complete 6f5f453e5f2d: Pull complete 42bc10b72f42: Pull complete Digest: sha256:7d081088e4bfd632a88e3f3bcd9e007ef44a796fddfe3261407a3f9f04abe1e7 Status: Downloaded newer image for registry:2 8f0fec4813cd6dc1d6fc65b8530dd2c3ca413a4e42904debf3005843220bcdb3 [lukas@docker-host ~]$ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8f0fec4813cd registry:2 &amp;#34;/entrypoint.</description>
    </item>
    
    <item>
      <title>Docker container and image - export and save</title>
      <link>http://lbartnicki92.github.io/posts/docker_save_load_export_import/</link>
      <pubDate>Fri, 10 Apr 2020 12:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_save_load_export_import/</guid>
      <description>From time to time we want export filesystem from container and make image from it.
Also sometimes there is need for giving someone our container image in single file without repository usage - on for example pendrive.
How to do this things?
Export and import container filesystem Export To export container filesystem we use command docker export.
This command will create output file with whole container filesystem - if we manually uncompress it - we will get directory structure like in / on Linux OS.</description>
    </item>
    
    <item>
      <title>Docker image - commands</title>
      <link>http://lbartnicki92.github.io/posts/docker_image_commands/</link>
      <pubDate>Wed, 08 Apr 2020 12:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_image_commands/</guid>
      <description>Docker has got couple commands that allows us to manage images.
List images Usage of docker image ls is described in another post: Docker image - list
Remove images Let&amp;rsquo;s check what images we have locally:
[lukas@docker-host ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 8 days ago 314MB alpine latest a187dde48cd2 2 weeks ago 5.6MB ubuntu 18.04 4e5021d210f6 2 weeks ago 64.2MB ubuntu latest 4e5021d210f6 2 weeks ago 64.</description>
    </item>
    
    <item>
      <title>Docker image - list</title>
      <link>http://lbartnicki92.github.io/posts/docker_image_listing/</link>
      <pubDate>Mon, 06 Apr 2020 19:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_image_listing/</guid>
      <description>Docker has got couple commands that allows us to manage images. Mostly we are getting list of images.
Basic listing Basic images listing with command: docker image ls.
Size is cumulative value from all layers needed for image.
Below images are local images without repository specified.
[lukas@docker-host ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 6 days ago 314MB alpine latest a187dde48cd2 2 weeks ago 5.</description>
    </item>
    
    <item>
      <title>Kubectl - configuration</title>
      <link>http://lbartnicki92.github.io/posts/kubernetes_kubectl_client_config/</link>
      <pubDate>Thu, 12 Mar 2020 21:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/kubernetes_kubectl_client_config/</guid>
      <description>Kubectl client gives us possibility to configure and switch easy between multiple K8s clusters.
Config files location for kubectl Main location for kubectl config files is $HOME/.kube, by default we have single config file named config:
[node1 ~]$ cd $HOME/.kube [node1 .kube]$ ls -lah total 4.0K drwxr-xr-x 1 root root 37 Mar 12 20:48 . dr-xr-x--- 1 root root 19 Nov 29 11:46 .. drwxr-x--- 3 root root 23 Mar 12 20:48 cache lrwxrwxrwx 1 root root 26 Nov 29 11:46 config -&amp;gt; /etc/kubernetes/admin.</description>
    </item>
    
    <item>
      <title>Docker build from dockerfile - compendium</title>
      <link>http://lbartnicki92.github.io/posts/docker_build_from_dockerfile/</link>
      <pubDate>Fri, 28 Feb 2020 17:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_build_from_dockerfile/</guid>
      <description>All docker containers are started from an image.
What&amp;rsquo;s an image? Image is a collection of read only layers with everything we need to run application. Commonly in image we have base layout of operating system we had choose and some necessary binaries to start our application.
For exaple, for PostgreSQL container image could contain CentOS base filesystem template, PostgreSQL binaries and some configuration files.
How we build image? We build image by issuing command docker build, but before we use it we need to create a Docker file.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://lbartnicki92.github.io/about/</link>
      <pubDate>Thu, 20 Feb 2020 17:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/about/</guid>
      <description>Hi! My name is Łukasz Bartnicki. I&amp;rsquo;m database administrator from Poland.
On daily basis I&amp;rsquo;m working mainly with Oracle Database but also PostgreSQL and many things around that technologies.
If you want to contact me, feel free to communicate by Linkedin - link to my profile at bottom of the site.
Why I created this site? What is aim of it? Good administrator or DevOps has to got his personal notes.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://lbartnicki92.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lbartnicki92.github.io/search/</guid>
      <description>What are you looking for?</description>
    </item>
    
  </channel>
</rss>