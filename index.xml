<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT Knowledge Pill</title>
    <link>http://lbartnicki92.github.io/</link>
    <description>Recent content on IT Knowledge Pill</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 08 Apr 2020 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://lbartnicki92.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker image - commands</title>
      <link>http://lbartnicki92.github.io/posts/docker_image_commands/</link>
      <pubDate>Wed, 08 Apr 2020 12:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_image_commands/</guid>
      <description>Docker has got couple commands that allows us to manage images.
List images Usage of docker image ls is described in another post: Docker image - list
Remove images Let&amp;rsquo;s check what images we have locally:
[root@docker-host ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 8 days ago 314MB alpine latest a187dde48cd2 2 weeks ago 5.6MB ubuntu 18.04 4e5021d210f6 2 weeks ago 64.2MB ubuntu latest 4e5021d210f6 2 weeks ago 64.</description>
    </item>
    
    <item>
      <title>Docker image - list</title>
      <link>http://lbartnicki92.github.io/posts/docker_image_listing/</link>
      <pubDate>Mon, 06 Apr 2020 19:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_image_listing/</guid>
      <description>Docker has got couple commands that allows us to manage images. Mostly we are getting list of images.
Basic listing Basic images listing with command: docker image ls.
Size is cumulative value from all layers needed for image.
Below images are local images without repository specified.
[root@docker-host ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 6 days ago 314MB alpine latest a187dde48cd2 2 weeks ago 5.</description>
    </item>
    
    <item>
      <title>Kubectl - configuration</title>
      <link>http://lbartnicki92.github.io/posts/kubernetes_kubectl_client_config/</link>
      <pubDate>Thu, 12 Mar 2020 21:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/kubernetes_kubectl_client_config/</guid>
      <description>Kubectl client gives us possibility to configure and switch easy between multiple K8s clusters.
Config files location for kubectl Main location for kubectl config files is $HOME/.kube, by default we have single config file named config:
[node1 ~]$ cd $HOME/.kube [node1 .kube]$ ls -lah total 4.0K drwxr-xr-x 1 root root 37 Mar 12 20:48 . dr-xr-x--- 1 root root 19 Nov 29 11:46 .. drwxr-x--- 3 root root 23 Mar 12 20:48 cache lrwxrwxrwx 1 root root 26 Nov 29 11:46 config -&amp;gt; /etc/kubernetes/admin.</description>
    </item>
    
    <item>
      <title>Docker build from dockerfile - compendium</title>
      <link>http://lbartnicki92.github.io/posts/docker_build_from_dockerfile/</link>
      <pubDate>Fri, 28 Feb 2020 17:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_build_from_dockerfile/</guid>
      <description>All docker containers are started from an image.
What&amp;rsquo;s an image? Image is a collection of read only layers with everything we need to run application. Commonly in image we have base layout of operating system we had choose and some necessary binaries to start our application.
For exaple, for PostgreSQL container image could contain CentOS base filesystem template, PostgreSQL binaries and some configuration files.
How we build image? We build image by issuing command docker build, but before we use it we need to create a Docker file.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://lbartnicki92.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://lbartnicki92.github.io/search/</guid>
      <description>What are you looking for?</description>
    </item>
    
  </channel>
</rss>