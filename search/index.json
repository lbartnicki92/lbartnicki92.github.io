[{"content":"","href":"/authors/","title":"Authors"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/categories/docker/","title":"docker"},{"content":"","href":"/tags/docker-build/","title":"docker build"},{"content":"All docker containers are started from an image.\nWhat\u0026rsquo;s an image? Image is a collection of read only layers with everything we need to run application. Commonly in image we have base layout of operating system we had choose and some necessary binaries to start our application.\nFor exaple, for PostgreSQL container image could contain CentOS base filesystem template, PostgreSQL binaries and some configuration files.\nHow we build image? We build image by issuing command docker build, but before we use it we need to create a Docker file.\nSimplest-minimal command to build image:\ndocker build -t postgresql-server:11.6 .\nWe just use -t for setting image name and tag.\nDot at the end means that for build context we choose current dir - we could specify here full path to build context directory, which should provide Dockerfile and other files that we want to copy into our image at building process.\nAnother important docker build parameters are:\n --pull - Always pull a newer version of the image from wchich we build --no-cache - disable layer build cache --build-arg - send to docker deamon values for parameters from Dockerfile --file - choose custom Dockerfile location(out of build context directory)  For complete list check docker build -h\nBefore we use below command first we have to prepair Dockerfile.\nWhat is a Dockerfile? Dockerfile is text file with all commands needed to create enviroment for our application. We can easly define what files we want to include in our image, what binaries will run in container or what ports we want to expose from it. Using Dockerfile gives us possibility to fast create multiple enviroments just by modifying file and reissuing docker build.\nAssume that we have our java application in 0.1 version currently running - we get from dev team 0.2. Only thing we have to do is to change in Dockerfile path to jar file(or if we put app version in variable use parameter --build-arg - later about it in sample) and issue docker build - of course we should provide proper name for new image which will reflect app version. After image build we can start container with new application.\nSample Dockerfile FROMcentos7RUN set -eux; \\ \t{ \\ \techo \u0026#39;Package: php*\u0026#39;; \\ \techo \u0026#39;Pin: release *\u0026#39;; \\ \techo \u0026#39;Pin-Priority: -1\u0026#39;; \\ \t} \u0026gt; /etc/apt/preferences.d/no-debian-php# persistent / runtime depsENV PHPIZE_DEPS \\ \tautoconf \\ \tdpkg-dev \\ \tfile \\ \tg++ \\ \tgcc \\ \tlibc-dev \\ \tmake \\ \tpkg-config \\ \tre2cRUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ \t$PHPIZE_DEPS \\ \tca-certificates \\ \tcurl \\ \txz-utils \\ \t--no-install-recommends \u0026amp;\u0026amp; rm -r /var/lib/apt/lists/*ENV PHP_INI_DIR /usr/local/etc/phpRUN mkdir -p $PHP_INI_DIR/conf.dRUN apt-get update \\ \t\u0026amp;\u0026amp; apt-get install -y --no-install-recommends \\ \tapache2 \\ \t\u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*ENV APACHE_CONFDIR /etc/apache2ENV APACHE_ENVVARS $APACHE_CONFDIR/envvarsRUN set -ex \\ \t\\ \t\u0026amp;\u0026amp; sed -ri \u0026#39;s/^export ([^=]+)=(.*)$/: ${\\1:=\\2}\\nexport \\1/\u0026#39; \u0026#34;$APACHE_ENVVARS\u0026#34; \\ \t\\ # setup directories and permissions\t\u0026amp;\u0026amp; . \u0026#34;$APACHE_ENVVARS\u0026#34; \\ \t\u0026amp;\u0026amp; for dir in \\ \t\u0026#34;$APACHE_LOCK_DIR\u0026#34; \\ \t\u0026#34;$APACHE_RUN_DIR\u0026#34; \\ \t\u0026#34;$APACHE_LOG_DIR\u0026#34; \\ \t/var/www/html \\ \t; do \\ \trm -rvf \u0026#34;$dir\u0026#34; \\ \t\u0026amp;\u0026amp; mkdir -p \u0026#34;$dir\u0026#34; \\ \t\u0026amp;\u0026amp; chown -R \u0026#34;$APACHE_RUN_USER:$APACHE_RUN_GROUP\u0026#34; \u0026#34;$dir\u0026#34;; \\ \tdoneRUN a2dismod mpm_event \u0026amp;\u0026amp; a2enmod mpm_prefork","href":"/posts/dockerfile/","title":"Docker build from dockerfile - step by step"},{"content":"","href":"/tags/docker-tag/","title":"docker tag"},{"content":"","href":"/tags/dockerfile/","title":"dockerfile"},{"content":"","href":"/","title":"IT Knowledge Pill"},{"content":"","href":"/authors/lbartnicki/","title":"lbartnicki"},{"content":"","href":"/posts/","title":"Posts"},{"content":"","href":"/tags/","title":"Tags"},{"content":"What are you looking for?\n","href":"/search/","title":""},{"content":"","href":"/series/","title":"Series"}]
