<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on IT Knowledge Pill</title>
    <link>http://lbartnicki92.github.io/posts/</link>
    <description>Recent content in Posts on IT Knowledge Pill</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 May 2020 10:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://lbartnicki92.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Production Environment - Enterprise Edition and security features</title>
      <link>http://lbartnicki92.github.io/posts/docker_enterprise_ucp_security/</link>
      <pubDate>Thu, 14 May 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_enterprise_ucp_security/</guid>
      <description>In production environment we should care about security, also we want easy of usage.
So, it is good to know docker security options and Docker Enterprise Edition.
 This guide assume that we have got Docker Enterprise Edition installed on three node cluster. Most of features described here are paid ones, but we can get a trial of Docker Enterprise Edition for free - 30 day period.
How to do it?</description>
    </item>
    
    <item>
      <title>Docker network - complete guide</title>
      <link>http://lbartnicki92.github.io/posts/docker_network/</link>
      <pubDate>Thu, 07 May 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_network/</guid>
      <description>Containers need to communicate with each other and outside world.
Docker has wide network capabilities.
What we can do with docker network? How to use it?
Docker Network Theory What elements we have in docker network?
 CNM libnetwork drivers  Docker network concept is based on open-source design specification called Container Network Model(CNM). CNM assume that network drivers should be pluggable.
Docker CNM implementation is in libnetwork library.
What we can do with docker CNM?</description>
    </item>
    
    <item>
      <title>Docker TLS - secure client and daemon</title>
      <link>http://lbartnicki92.github.io/posts/docker_tls_secure_client_daemon/</link>
      <pubDate>Wed, 06 May 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_tls_secure_client_daemon/</guid>
      <description>By default after installing docker on our host we have client and server(daemon) locally speaking to each other by IPC socket. On Linux - /var/run/docker.sock.
So what we should do when our daemon is in remote location? How to make connection secure?
Example environment    Role Server IP     Client docker-host1.lukas.int 10.10.10.20   CA docker-host2.lukas.int 10.10.10.21   Daemon docker-host3.lukas.int 10.10.10.22    All hosts can reach each other by hostname.</description>
    </item>
    
    <item>
      <title>Docker logging driver configuration - json-file and journald</title>
      <link>http://lbartnicki92.github.io/posts/docker_logging_driver/</link>
      <pubDate>Tue, 05 May 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_logging_driver/</guid>
      <description>Docker allows us to stream logs to different places with plugins called logging drivers.
How to change logging driver? What&amp;rsquo;s the most popular ones?
What is logging driver? Docker has got two types of logging drivers:
 built-in like:  awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog   external drivers that we can install with docker plugin install  Logging driver is used to forward logs from containers to specific log aggregators, widely known rsyslog or fluentd for example.</description>
    </item>
    
    <item>
      <title>Docker install and upgrade guide - CentOS and Ubuntu</title>
      <link>http://lbartnicki92.github.io/posts/docker_install_upgrade/</link>
      <pubDate>Mon, 04 May 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_install_upgrade/</guid>
      <description>Install and upgrade of Docker Engine is simple and straightforward process.
In this post I will cover all important information in one place.
Docker install requirements Minimum requirements
 8GB RAM per manager node 4GB RAM per worker node 3GB of free disk space  Recommended production requirements
 16GB RAM per manager node 4 vCPUs per manager node 25-100GB of free disk space on each node  Also you must have one of the following OS:</description>
    </item>
    
    <item>
      <title>Docker swarm - setup and usage</title>
      <link>http://lbartnicki92.github.io/posts/docker_swarm_compendium/</link>
      <pubDate>Tue, 28 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_swarm_compendium/</guid>
      <description>For HA and easier management of our containers we can create swarm cluster.
It is composed of couple nodes with docker engine installed.
How to setup swarm and use it?
Example configuration and prerequisites In my lab environment I used three nodes:
   Role in Swarm Server IP     Manager docker-host1.lukas.int 10.10.10.20   Worker1 docker-host2.lukas.int 10.10.10.21   Worker2 docker-host3.lukas.int 10.10.10.22    Each node has got docker engine installed with standard procedure as for single node docker.</description>
    </item>
    
    <item>
      <title>Docker volumes and bind mounts</title>
      <link>http://lbartnicki92.github.io/posts/docker_volume_bind_mounts/</link>
      <pubDate>Wed, 22 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_volume_bind_mounts/</guid>
      <description>Storing persistent data in containers needs special storage. There is two options - volumes or bind mounts.
How to use them?
Volume vs bind mounts Bind mounts:
 rely on docker host directory structure different behaviour for --mount and --volume parameters cant&amp;rsquo; be control by docker CLI used mainly in development environments  Volumes:
 can be control by docker CLI works in Linux and Windows hosts easier to backup because of central location /var/lib/docker/volumes easier to store in cloud provider infrastructure preferred method as docker documentation said give possibility to be shared between cluster nodes  At newer versions of Docker preferred method for configuring is --mount parameter instead of --volume.</description>
    </item>
    
    <item>
      <title>Docker devicemapper - setup</title>
      <link>http://lbartnicki92.github.io/posts/docker_configure_devicemapper/</link>
      <pubDate>Fri, 17 Apr 2020 14:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_configure_devicemapper/</guid>
      <description>If you are searching for better manageability of storage layer under your docker images and container you should consider devicemapper storage driver.
It gives you ability to use block device instead of standard file based storage.
Configure devicemapper with lvm as storage driver  Important! If you creating fresh docker installation and want to use only one block device as storage - from docker 17.06 you can use autoconfigure feature, simply by adding to /etc/docker/daemon.</description>
    </item>
    
    <item>
      <title>Docker storage driver - setup</title>
      <link>http://lbartnicki92.github.io/posts/docker_storage_drivers/</link>
      <pubDate>Fri, 17 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_storage_drivers/</guid>
      <description>Each container except read only image space, consume also some writable space from storage layer.
This writable and none writable space are managed together by storage driver.
What is storage driver? Storage driver is a plugin for docker which is responsible for creating and maintaining union filesystem used by containers - for example: creating proper directory layout on filesystem.
It is important to notice that under storage driver we always have got regular filesystem like ext4, zfs or vfs.</description>
    </item>
    
    <item>
      <title>Docker registry - operations on API</title>
      <link>http://lbartnicki92.github.io/posts/docker_registry_api_operations/</link>
      <pubDate>Wed, 15 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_registry_api_operations/</guid>
      <description>Instead of using Docker CLI commands - we can communicate with Docker registry with GET/POST methods of Docker Registry HTTP API.
Post include information for V2 of API.
Example setup For our examples we use docker private registry in container. Currently we have got alpine image and couple of ubuntu images loaded in it.
[lukas@docker-host ~]$ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f628491a985a registry:2 &amp;#34;/entrypoint.sh /etcâ€¦&amp;#34; About a minute ago Up About a minute 0.</description>
    </item>
    
    <item>
      <title>Docker private registry - setup</title>
      <link>http://lbartnicki92.github.io/posts/docker_private_registry_setup/</link>
      <pubDate>Tue, 14 Apr 2020 10:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_private_registry_setup/</guid>
      <description>It is very common to setup own Docker registry for our private images.
Basic registry setup If we want basic setup without TLS and any access control for example for lab, we can create it with command:
[lukas@docker-host ~]$ docker run -d -p 5000:5000 --restart=always --name registry registry:2 Unable to find image &amp;#39;registry:2&amp;#39; locally 2: Pulling from library/registry 486039affc0a: Pull complete ba51a3b098e6: Pull complete 8bb4c43d6c8e: Pull complete 6f5f453e5f2d: Pull complete 42bc10b72f42: Pull complete Digest: sha256:7d081088e4bfd632a88e3f3bcd9e007ef44a796fddfe3261407a3f9f04abe1e7 Status: Downloaded newer image for registry:2 8f0fec4813cd6dc1d6fc65b8530dd2c3ca413a4e42904debf3005843220bcdb3 [lukas@docker-host ~]$ docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8f0fec4813cd registry:2 &amp;#34;/entrypoint.</description>
    </item>
    
    <item>
      <title>Docker container and image - export and save</title>
      <link>http://lbartnicki92.github.io/posts/docker_save_load_export_import/</link>
      <pubDate>Fri, 10 Apr 2020 12:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_save_load_export_import/</guid>
      <description>From time to time we want export filesystem from container and make image from it.
Also sometimes there is need for giving someone our container image in single file without repository usage - on for example pendrive.
How to do this things?
Export and import container filesystem Export To export container filesystem we use command docker export.
This command will create output file with whole container filesystem - if we manually uncompress it - we will get directory structure like in / on Linux OS.</description>
    </item>
    
    <item>
      <title>Docker image - commands</title>
      <link>http://lbartnicki92.github.io/posts/docker_image_commands/</link>
      <pubDate>Wed, 08 Apr 2020 12:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_image_commands/</guid>
      <description>Docker has got couple commands that allows us to manage images.
List images Usage of docker image ls is described in another post: Docker image - list
Remove images Let&amp;rsquo;s check what images we have locally:
[lukas@docker-host ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 8 days ago 314MB alpine latest a187dde48cd2 2 weeks ago 5.6MB ubuntu 18.04 4e5021d210f6 2 weeks ago 64.2MB ubuntu latest 4e5021d210f6 2 weeks ago 64.</description>
    </item>
    
    <item>
      <title>Docker image - list</title>
      <link>http://lbartnicki92.github.io/posts/docker_image_listing/</link>
      <pubDate>Mon, 06 Apr 2020 19:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_image_listing/</guid>
      <description>Docker has got couple commands that allows us to manage images. Mostly we are getting list of images.
Basic listing Basic images listing with command: docker image ls.
Size is cumulative value from all layers needed for image.
Below images are local images without repository specified.
[lukas@docker-host ~]# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 6 days ago 314MB alpine latest a187dde48cd2 2 weeks ago 5.</description>
    </item>
    
    <item>
      <title>Kubectl - configuration</title>
      <link>http://lbartnicki92.github.io/posts/kubernetes_kubectl_client_config/</link>
      <pubDate>Thu, 12 Mar 2020 21:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/kubernetes_kubectl_client_config/</guid>
      <description>Kubectl client gives us possibility to configure and switch easy between multiple K8s clusters.
Config files location for kubectl Main location for kubectl config files is $HOME/.kube, by default we have single config file named config:
[node1 ~]$ cd $HOME/.kube [node1 .kube]$ ls -lah total 4.0K drwxr-xr-x 1 root root 37 Mar 12 20:48 . dr-xr-x--- 1 root root 19 Nov 29 11:46 .. drwxr-x--- 3 root root 23 Mar 12 20:48 cache lrwxrwxrwx 1 root root 26 Nov 29 11:46 config -&amp;gt; /etc/kubernetes/admin.</description>
    </item>
    
    <item>
      <title>Docker build from dockerfile - compendium</title>
      <link>http://lbartnicki92.github.io/posts/docker_build_from_dockerfile/</link>
      <pubDate>Fri, 28 Feb 2020 17:00:00 +0100</pubDate>
      
      <guid>http://lbartnicki92.github.io/posts/docker_build_from_dockerfile/</guid>
      <description>All docker containers are started from an image.
What&amp;rsquo;s an image? Image is a collection of read only layers with everything we need to run application. Commonly in image we have base layout of operating system we had choose and some necessary binaries to start our application.
For exaple, for PostgreSQL container image could contain CentOS base filesystem template, PostgreSQL binaries and some configuration files.
How we build image? We build image by issuing command docker build, but before we use it we need to create a Docker file.</description>
    </item>
    
  </channel>
</rss>